<?php

namespace App\Services;

use App\Models\Event;
use App\Models\Feedback;
use App\Models\User;
use App\Notifications\EventAtRiskNotification;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class EventRiskDetectionService
{
    protected $apiKey;
    protected $baseUrl;
    protected $model;

    public function __construct()
    {
        $this->apiKey = env('OPENROUTER_API_KEY', '');
        $this->baseUrl = env('OPENROUTER_API_URL', 'https://openrouter.ai/api/v1');
        $this->model = env('OPENROUTER_MODEL', 'meta-llama/llama-3.3-70b-instruct:free');
        
        Log::info("üîç EventRiskDetectionService initialized");
    }

    /**
     * Detect events at risk based on negative feedback
     * 
     * @return array Array of events at risk with their analysis
     */
    public function detectEventsAtRisk(): array
    {
        $eventsAtRisk = [];
        
        // Get all events with more than 3 feedback entries
        $events = Event::withCount('feedbacks')
            ->having('feedbacks_count', '>=', 3)
            ->get();
        
        foreach ($events as $event) {
            // Get all feedback for this event
            $feedbacks = $event->feedbacks()->with('participant')->get();
            
            // Count negative feedback (note < 3)
            $negativeFeedbacks = $feedbacks->filter(function ($feedback) {
                return $feedback->note < 3;
            });
            
            // If there are more than 3 negative feedbacks, mark as at risk
            if ($negativeFeedbacks->count() >= 3) {
                $analysis = $this->analyzeNegativeFeedback($event, $negativeFeedbacks);
                
                // Update event status
                $event->at_risk = true;
                $event->risk_analysis = $analysis;
                $event->save();
                
                // Notify organizers
                $this->notifyOrganizers($event, $analysis);
                
                $eventsAtRisk[] = [
                    'event' => $event,
                    'negative_count' => $negativeFeedbacks->count(),
                    'analysis' => $analysis
                ];
            }
        }
        
        return $eventsAtRisk;
    }
    
    /**
     * Analyze negative feedback using OpenRouter API
     * 
     * @param Event $event
     * @param \Illuminate\Support\Collection $negativeFeedbacks
     * @return string Analysis of the negative feedback
     */
    protected function analyzeNegativeFeedback(Event $event, $negativeFeedbacks): string
    {
        // If no API key, return basic analysis
        if (empty($this->apiKey)) {
            Log::warning('OpenRouter API key not set. Using basic analysis.');
            return $this->generateBasicAnalysis($negativeFeedbacks);
        }
        
        try {
            $prompt = $this->buildAnalysisPrompt($event, $negativeFeedbacks);
            
            $response = Http::withOptions([
                'verify' => false,
                'timeout' => 30,
            ])->withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'HTTP-Referer' => env('APP_URL', 'http://localhost'),
                'X-Title' => 'EcoEvents Risk Analysis',
                'Content-Type' => 'application/json',
            ])->post($this->baseUrl . '/chat/completions', [
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => 'You are an event analysis expert who helps identify issues in events based on feedback. Your analysis should be concise, actionable, and in French language.'
                    ],
                    [
                        'role' => 'user',
                        'content' => $prompt
                    ]
                ],
                'max_tokens' => 500,
                'temperature' => 0.7,
                'stream' => false,
            ]);
            
            if ($response->successful()) {
                $data = $response->json();
                
                if (isset($data['choices'][0]['message']['content'])) {
                    return trim($data['choices'][0]['message']['content']);
                }
            }
            
            Log::error('OpenRouter API error: ' . $response->body());
            return $this->generateBasicAnalysis($negativeFeedbacks);
            
        } catch (\Exception $e) {
            Log::error('OpenRouter API exception: ' . $e->getMessage());
            return $this->generateBasicAnalysis($negativeFeedbacks);
        }
    }
    
    /**
     * Build prompt for analysis
     * 
     * @param Event $event
     * @param \Illuminate\Support\Collection $negativeFeedbacks
     * @return string
     */
    protected function buildAnalysisPrompt(Event $event, $negativeFeedbacks): string
    {
        $feedbackTexts = $negativeFeedbacks->map(function ($feedback) {
            return "- Note: {$feedback->note}/5, Commentaire: \"{$feedback->commentaire}\"";
        })->join("\n");
        
        return <<<PROMPT
Analyse les commentaires n√©gatifs pour l'√©v√©nement √©cologique suivant:

√âV√âNEMENT: {$event->title}
DESCRIPTION: {$event->description}
DATE: {$event->start_date}
LIEU: {$event->location}

COMMENTAIRES N√âGATIFS:
{$feedbackTexts}

INSTRUCTIONS:
1. Identifie les probl√®mes principaux mentionn√©s dans les commentaires
2. Groupe les probl√®mes par cat√©gories (organisation, contenu, logistique, etc.)
3. Sugg√®re 3-5 actions concr√®tes pour am√©liorer l'√©v√©nement
4. Fournis une analyse concise et constructive

FORMAT DE R√âPONSE:
üö® PROBL√àMES PRINCIPAUX:
‚Ä¢ [Probl√®me 1]
‚Ä¢ [Probl√®me 2]
‚Ä¢ [Probl√®me 3]

üìä ANALYSE:
[2-3 phrases d'analyse g√©n√©rale]

‚úÖ ACTIONS RECOMMAND√âES:
1. [Action concr√®te 1]
2. [Action concr√®te 2]
3. [Action concr√®te 3]

Ton analyse doit √™tre en fran√ßais, concise (maximum 300 mots) et orient√©e vers des solutions pratiques.
PROMPT;
    }
    
    /**
     * Generate basic analysis without AI
     * 
     * @param \Illuminate\Support\Collection $negativeFeedbacks
     * @return string
     */
    protected function generateBasicAnalysis($negativeFeedbacks): string
    {
        $totalFeedbacks = $negativeFeedbacks->count();
        $averageRating = $negativeFeedbacks->avg('note');
        
        $commonIssues = [
            "Organisation insuffisante",
            "Probl√®mes logistiques",
            "Contenu ne correspondant pas aux attentes",
            "Manque d'interactivit√©",
            "Probl√®mes techniques"
        ];
        
        $randomIssues = array_slice($commonIssues, 0, min(3, count($commonIssues)));
        $issuesList = implode("\n‚Ä¢ ", $randomIssues);
        
        return <<<ANALYSIS
üö® PROBL√àMES PRINCIPAUX:
‚Ä¢ {$issuesList}

üìä ANALYSE:
Cet √©v√©nement a re√ßu {$totalFeedbacks} commentaires n√©gatifs avec une note moyenne de {$averageRating}/5. Une analyse des commentaires montre des probl√®mes r√©currents qui n√©cessitent une attention imm√©diate.

‚úÖ ACTIONS RECOMMAND√âES:
1. Organiser une r√©union de d√©briefing avec l'√©quipe organisatrice
2. Contacter les participants pour obtenir des d√©tails suppl√©mentaires
3. R√©viser le format et le contenu de l'√©v√©nement pour les prochaines √©ditions
ANALYSIS;
    }
    
    /**
     * Notify organizers about the event at risk
     * 
     * @param Event $event
     * @param string $analysis
     */
    protected function notifyOrganizers(Event $event, string $analysis): void
    {
        // Find organizers (users with 'organisateur' role)
        $organizers = User::where('role', 'organisateur')->get();
        
        // Also notify admins
        $admins = User::where('role', 'admin')->get();
        
        $recipients = $organizers->merge($admins);
        
        foreach ($recipients as $user) {
            try {
                // Envoyer l'email via la notification
                $user->notify(new EventAtRiskNotification($event, $analysis));
                
                // Cr√©er manuellement l'entr√©e dans la table des notifications
                \Illuminate\Support\Facades\DB::table('notifications')->insert([
                    'id' => \Illuminate\Support\Str::uuid()->toString(),
                    'type' => 'App\\Notifications\\EventAtRiskNotification',
                    'notifiable_type' => get_class($user),
                    'notifiable_id' => $user->id,
                    'data' => json_encode([
                        'event_id' => $event->id,
                        'event_title' => $event->title,
                        'analysis' => $analysis,
                        'at_risk' => true,
                        'notification_type' => 'event_risk',
                    ]),
                    'read_at' => null,
                    'created_at' => now(),
                    'updated_at' => now(),
                ]);
                
                Log::info("Notification cr√©√©e pour l'utilisateur {$user->name} (ID: {$user->id})");
            } catch (\Exception $e) {
                Log::error("Erreur lors de la cr√©ation de la notification pour {$user->name}: " . $e->getMessage());
            }
        }
        
        Log::info("Notifications sent to " . $recipients->count() . " organizers/admins about event at risk: " . $event->title);
    }
}
